* Scheme Summary
** notes
- always think of lists in terms of their implementation as singly-linked list
- foldl and foldr are noteworthy
- look at optimized fib function
- try optimizing our combinations function similarly
** keywords
- define, load
- +, -, *, quotient, modulo
- =, <, >, <=, >=
- and, or, not
- if, cond
- car, cdr
- null?, integer?, symbol?, boolean?, procedure?, eq?, equal?
- length, append, reverse
- list, flatten, map, fold_left (foldl), fold_right (foldr), filtif I receive the position.er, zip, zipwith
- let, let*, letrec

** concepts
- lambda
- variadic functions
* Scheme
- call function :: (functionname params)
- define function :: (define (functionname params) body)
- our naive fib function :: cs403/ex1.scm
- load function definitions :: (load "filename")
- our optimized fib function :: cs403/ex2.scm
- representing list :: '(a b c d e f g)
  - lists are implemented as singly linked lists
- a few useful list functions
  - (car List) :: returns the first element in the list
  - (cdr List) :: returns all but the first element in the list
  - (cadr List) :: returns the car of the cdr i.e. second element in the list
  - (cadddr List) :: returns the car of the cdr of the cdr of the cdr
- our length function :: cs403/ex3.scm
- our summation function :: cs403/ex4.scm
  - note that in a multiplication function the base-case becomes 1
- some type checking
  - (pair? x) :: returns true for anything constructed with cons
  - (rational? x)
  - (integer? x)
  - (number? x) :: returns true if x is integer or rational
  - (boolean? x)
  - (null? x)
  - (procedure? x) :: returns true if x is a function
  - (eq? x y) :: returns true if x and y are the same (works on any type)
    - there's actually more nuance than that though
    - = compares value, for instance equivalent fractions
    - eq? checks if objects are the same
  - (equal? List1 List2) :: returns true if the provided lists contain the same elements
    - our own implementation of equal? :: cs403/ex8.scm
- a new list function
  - (cons element List) :: adds element to the front of List
- our bubble sort implementation :: cs403/ex5.scm
- our append implementation :: cs403/ex6.scm
- our reverse implementation :: cs403/ex7.scm
more list functions
- (list Element) :: equivalent to (cons Element '())
- (flatten List) :: returns list with all nesting removed (not predefined)
  - our flatten implementation :: cs403/ex9.scm
- (map Procedure List) :: performs Procedure on every element in List and returns a new list of equal size
  - our map implementation :: cs403/ex10.scm
- (filter Predicate List) :: applies predicate to elements in List and removes those that return false
  - our filter implementation :: cs403/ex11.scm
- (fold-left Procedure Elemeent List) :: combines all elements in List using Procedure moving from left to right (left associative) beginning with Element
  - our fold-left implementation :: cs403/ex12.scm
  - what would (fold-left cons '() '(a b c d)) return?
- (fold-right Procedure Element List) :: combines all elements in List using Procedure moving from right to left (right associative) beginning with Element
  - our fold-right implementation :: cs403/ex12.scm
  - what about (fold-right cons '() '(a b c d)) return?
  - what about swapcons
  - what about list
- (zip List1 List2) :: creates a list of pairs from elements of List1 and List2
  - our zip implementation :: cs403/ex13.scm
- (zipwith Procedure List1 List2) :: creates a list by combining pairs of elements from List1 and List2 using Procedure
  - our zipwith implementation :: cs403/ex13.scm
- (invmap ListFuncts x) :: (not predefined) applies each function to x returning list of same size as ListFuncts
  - our invmap implementation :: cs403/ex18.scm
Tree Traversals       
- our tree defined as data :; cs403/ex14.scm
- our postorder implementation :: cs403/ex14.scm
Lambda Functions
- (lambda (Params) (Expression)) :: returns a Procedure that takes Params and evaluates to Expression
  - our anonymous cube function :: cs403/ex15.scm
  - our anonymous reverse function :: cs403/ex15.scm
  - note that all functions are actually implicitly created as lambda functions that may then be assigned to symbols
Let
- (let List Expr) :: List contains pairs of Symbols and Values, Expr is evaluated substituting Symbols with there corresponding values
  - our example let expression :: cs403/ex16.scm
  - List is "evaluated" in parallel drawing from global scope
- (let* List Expr)
  - List is "evaluated" sequentially, drawing from previous local definitions, and global scope
- (letrec List Expr)
  - our example letrec expression with brief explanation :: cs403/ex17.scm
Cond
- list of pairs
  - first item in pair is conditional
  - second item in pair is commands, possibly multiple, enclosed in parentheses
- explanation has been omitted, but can be seen in class reference material
- 
Variadic Functions
- (define (Name . Args) (do something)) :: Function definition where Args is a list created from all provided arguments
- (define (plus . args) (fold-left + 0 args)) :: user defined variadic plus function
  - this notation is used because scheme stores your function call as a linked list with the function in the head node
More
- functions can return other functions
  - raisetofunct :: cs403/ex19.scm
Object-oriented Style
- functions that end with ! by convention, have side-effects
- (set! Variable Value) :: changes the value of Variable to Value
- simulating oop in scheme:
(define (classname)
 (let (instancevar names and vals)
   (lambda (msg)
     body)))
(define instance (classname))
- our object-oriented random number generator :: cs403/rand.scm
- our object-oriented stack implementation ::  
* Haskell Summary
- we can put () around an operator to use it as a function
  - e.g. (+) 3 4
- we can use tics to use a function as an operator
  - e.g. 10 `mod` 3
- let, in
- where
- not
- /=, ==, &&, ||
- if, then, else
- +, -, *
- quot, mod
- head, tail, :
- map, fold, filter, zip
- drop, take
** Exam
- defining functions
- recursion
- higher-order functions (map, fold)
- infinite lists and lazy evaluation
- user defined data-types
- type inference & declaration
* Haskell
- Haskell requires that function definitions are loaded from files
  - but a single file may contain numerous function definitions
- functions are defined recursively, with base cases then a recursive case
- cases are checked from top to bottom
- guards may be used in order to list certain cases earlier
  - e.g. fact n | n > 0
- our fibonacci function :: fib.hs
  - includes examples of let in and where
- an optimized fibonacci function is on the class server
- :load filename :: load file
- -- :: denotes the beginning of a comment
- let, in :: keywords in haskell for beginning let blocks
- in let and where blocks we can use braces+semicolon notation
  - we can also use whitespace only by indenting the entire block to the same level
- complex conditions use the same syntax as C :: && ||
List Operations
- [1, 2, 3] :: creates a list with elements 1 2 3
- length List :: returns the length of List
- [ ] :: represents the empty list
- List1 ++ List2 :: appends List2 to List1
- reverse List :: returns reversed List
- if then else :: in practice they aren't required often as a result of how functions are defined
  - our fib function using if then else :: haskell/ex1.hs
- head :: equivalent to car
- tail :: equivalent to cdr
- (:) :: equivalent to cons
- surrounding an operator with () makes it a function
- surrounding a function with `` makes it an operator
- our length function implementation :: haskell/length.hs
- our append function implementation :: haskell/ex2.hs
- our reverse function implementation :: haskell/ex2.hs
- lambda function in haskell :: \x->expr
  - our anonymous odd implementation :: (\x -> mod x 2 == 1)
- foldl (+) 0 [2,3,4,5,6]
- foldr (:) [] [1,2,3,4] :: identity function for list
- foldl (\x -> \y -> y:x) [] [1,2,3,4] :: reverse list
- filter functions as expected
- zip creates a list of tuples with 2 elements from 2 lists
- zip creates a list of tuples with 3 elements from 3 lists
- tuple :: like a struct, does not require same type
- zipWith is built into haskell unlike mit-scheme
- and List :: equivalent to foldr (&&) 1 List
- or List :: equivalent to foldr (||) 0 List
- any Predicate List :: equivalent to:  or (map Predicate List)
- all Predicate List :: equivalent to:  and (map Predicate List)
- there is no difference between a string and a list of characters
list comprehension

- map odd [2,3,5,6,8,9]
equivalent to
- [ odd x | x <- [2,3,5,6,8,9] ]

- filter odd [2,3,5,6,8,9]
equivalent to 
- [x | x <-[2,3,5,6,8,9], odd x]

- [x*x | x <-[2,3,5,6,8,9], odd x]
- [1..10] :: [1,2,3,4,5,6,7,8,9,10]

- Get the squares of odd numbers, 1 to 100:
- [x*x| x<-[1..100], (mod x 2) /= 0]

- quicksort implementation:
- haskell/qsort.hs

- more with infinite lists and recursively defined functions
- haskell/ex3.hs

- our enumerated type creation
- haskell/ex3.hs

- qualifiers (hierarchical, high numbers require lower numbers)
1. eq :: ==, /=
  2. ord :: <, >, <=, >=,
    3. num :: +, -, *
      4a. Integral div, mod
        5aa. Int
        5ab. Integer
      4b. Fractional /
        5ba. Float
        5bb. Double


more on enumerated types
-haskell/ex5.hs

a tree implementation
-haskell/tree.hs

- defining functions:
  - funname :: type 
    - qualifiers =>
    - paramtype -> returntype
      - a -> ( a -> a )
      - functions only take 1 param at a time
        - think let f = max 5 in f 7
        - this is called *currying* a function
- uncurry Func :: takes curryied function and returns an un-curryied function
- curry Func :: takes un-curryied function and returns an curryied function
- flip Func :: takes a curryied function and returns one with order of params flipped
- (func1 . func2) :: composition of f and g
* Prolog Summary
* Prolog
prolog has three basic constructs:
- facts
- rules
- queries
A collection of facts and rules is called a knowledge base (or database)
lowercase letters denote symbols/constants
uppercase denotes a variable

an example database:
  today(friday)
  after(friday, saturday)
  after(saturday, sunday)
  threeDaysAfter(X,Y) :- after(X,Z), after(Z,W), after(W,Y)
  etc...

an example query on our database (with logical trace):
? today(X)
  X = friday
? three_days_after(tuesday, D)
  X = tuesday, Y = D
  after(tuesday, Z), after(Z, W), after(W, D)
  Z = wednesday
  W = thursday
  D = friday
 
- load database using consult('filename'). 
when a query is passed with multiple answers, ; to receive more answers

- prolog uses a search algorithm like so:
  - find the appropriate fact/rule from database, starting at the top
  - replace formal with actual parameters
  - create children from facts/rules in relevant rule definition
  - work from left to right finding satisfying conditions for each child
    - backtrack when a false statement is tried

- use the is keyword to evaluate before equality-checking
  - if we try to evaluate an expression with an undefined variable, we will throw an error
  - limits directionality

- prolog/ex1.pl :: has some math examples

lists
- [1,2,3,4,5]
- [Head | Tail] :: equivalent to head : tail or (cons head tail)
- [1,2 | [3,4,5]] :: [1,2,3,4,5]
like cons, but takes any number of arguments 

atomic()
- built in predicate that succeeds for everything except non-empty list
atom()
- matches symbols

Division
/ :: gives floating point
div() :: gives truncated integer

Cuts
! :: don't backtrack past here

modifying db
- asserta()
- assertz()
- retract()
- retractall()

* Smalltalk Summary
- 'collect:' :: map
- 'inject: id into: f' :: foldl
- 'select: f' :: filter
- 'reject: f' :: inverse of filter 
- 'detect: f ifNone: [defaultValue]' :: filter, select first element
  - 'ifNone: ' is an optional exception handling method
  - without it, this method may cause your program to crash

smalltalk keywords
- self :: the calling object
- nil :: null value
- true
- false
- super :: the superclass of the calling object

examples of these functions can be found in the collections.st file

the allSelectors method will return all methods of the calling class
e.g. 'value class allSelectors'

the $ symbol denotes a character
'' delimits strings

/ precise division (can return fraction)
// integer division
\\ modulus
* Smalltalk
- assignment statement:
    var := expression 
- method call with no arguments:
    receiver method
- method call on binary operators (operator method with one argument):
    receiver op parameter 
- method call with arguments
    receiver m1: p1 m2: p2 m3: p3

 *method passing precedence*
there is no operator precedence, evaluation from left to right
however parameter-less methods are evaluated before operator methods
(non-operator)method calls with arguments are evaluated last
we can alter precedence using parenthesis as expected
 
expressions are separated using the . character
 like the semi-colon in c based languages



- all classes have built-in class method that returns the type of that object
- all classes are an instance of their own metaclass 
- also superclass method
 
- [] :: creates a *block*
  - delays evaluation until absolutely necessary
  - for instance in :and invocation, may be unnecessary to evaluate parameter
  - in fact, :and requires instance of BlockClosure as parameter
  - we can define variables using other variables which have not yet been defined
  - we can evaluate at an arbitrary time using the 'value' method

smalltalk is a strictly object oriented language, so
control flow must be accomplished through methods

example:
  a<7 ifTrue: [10] ifFalse: [20]

defining new classes:
  Object sublass: #Symbol
where Object is the superclass and Symbol is the name assigned to the class

- # denotes a symbol
- ^ denotes a return statement

all classes have the 'new' method that creates a new instance of that class
we can also pass the printNl method to print return values

we can two methods of class definition in 'smalltalk/Pair.st'

cascading method send
  receiver msg; op paramater; m1 : p1 m2 : p2 
separate the different messages to be passed with a semicolon

we can do the some exploration of the class system using some built-in methods:
- 'isMemberOf:' :: boolean, accepts only the particular class that the calling object is an instance of
- 'isKindOf' :: like isMemberOf, but includes superclasses

*** lambda functions
block with k params: ( equivalent to a lambda function ) 
  block := [ :p1 :p2 :p3 :pk | expression ]
we can call this block function using the following syntax
  block value: v1 value: v2 value: v3
  note: that this is not a curried method
  
*** arrays
an array has a fixed size once it is created 

creating arrays:
  a := #(2 3 4 5 6) 
we can insert different types into the same array
i.e. arrays are not typed in smalltalk

we can map operations to values in an array using the following syntax:
  a do: [:x | x printNl] 
this would print each value from the array followed by a newline character
this method, 'do', takes a block closure as an argument

we can also use the 'at:' method to return the value at a specific index in an array
note that smalltalk uses 1-based indexing

in addition we have the at: put: method to insert to an arbitrary spot in the array
this method replaces the value currently at that spot in the array

aside from do, there are other methods of looping in smalltalk

within the integer class there is a cascading method 'to: do:'
e.g.
  10 to: 20 do: [:x | x printNl]
would print the values from 10 to 20, each followed by a newline character
In a similar vein, integer has a the timesRepeat: method

*** collections
an OrderedCollection is like an array, but without a fixed-size

there is a concept similar to 'map' in haskell/scheme called 'collect'
there is an example of the use of this method in smalltalk/looping.st

an array is an ordered collection
we can convert any collection to an array using the asArray method
  newArray := collection asArray
sets are unordered collections

we have a method to add one collection to another
  collection1 addAll: collection2
similarly we have a removeAll method
  colleciton1 removeAll: collection2

other collections:
- string
- linked list
- ordered collection
- dictionary
- bag
- sets
- array 

*** Dictionary
uses similar syntax to array
- dictionary at: key put: value

** Account.st
| type                | members            |
|---------------------+--------------------|
| instance vars       | balance            |
|                     | income             |
|                     | outgo              |
|                     |                    |
| class vars          | total              |
|                     |                    |
| class instance vars | subtotal           |
|                     |                    |
| instance methods    | open:              |
|                     | getBalance         |
|                     | display            |
|                     | deposit: from:     |
|                     | withdraw: for:     |
|                     | totalReceivedFrom: |
|                     | totalSpentFor:     |
|                     |                    |
| class methods       | new                |
|                     | addSubtotal:       |
|                     | getTotal           |
|                     | getSubtotal        |
* MPI
  message-passing (distributed)
| routine name  | description                                                       |
| mpi_init      |                                                                   |
| mpi_finalize  |                                                                   |
| mpi_comm_size | obtains the number of process                                     |
| mpi_comm_rank | obtains the label of the calling process                          |
|---------------+-------------------------------------------------------------------|
| mpi_send      | blocking send                                                     |
| mpi_recv      | blocking receive                                                  |
|---------------+-------------------------------------------------------------------|
| mpi_isend     | non-blocking/immediate send                                       |
| mpi_irecv     | non-blocking/immediate receive                                    |
| mpi_test      | queries if an operation has been completed                        |
| mpi_wait      | waits until an operation is completed                             |
| mpi_waitAll   | waits until all operations(send/receive) are complete             |
|---------------+-------------------------------------------------------------------|
| mpi_Barrier   | waits until all processes call this function                      |
| mpi_Bcast     | sends data from src, all other processes receive from src         |
| mpi_Scatter   | src sends each process a different contiguous section of data     |
| mpi_Gather    | all processes send data which is collected (concatenated) at dest |
| mpi_Reduce    | like gather, but aggregates using an op before being received     |
| mpi_Scan      | on each call, data is aggregated and stored by calling proc       |
|               |                                                                   |

mpicc calls our compiler
mpirun -np (num processes) ./process

The default send and receive functions are blocking. There are also immediate versions of these routines
* OpenMP
Multi-processing (shared memory)
threads rather than processes
| omp_set_num_threads                    |                                                                                           |
| #pragma omp parallel                   | runs the next block on each thread                                                        |
| #pragma omp parallel for               | distributes loops across processes                                                        |
| #pragma omp parallel num_threads()     |                                                                                           |
| omp_get_thread_num                     |                                                                                           |
| omp_get_num_threads                    |                                                                                           |
| #pragma omp critical                   | denotes that the next block is a critical section (only one thread can execute at a time) |
| #pragma omp atomic                     | performs the next block as an atomic instruction                                          |
| #pragma omp for nowait                 |                                                                                           |
| #pragma omp reduction(+:count)         | would sum values for count                                                                |
| #pragma omp default(shared) private(x) | makes variables shared by default (redundant), but x not shared                           |
|                                        |                                                                                           |


gcc -fopenmp

8 questions,
  4 coding
  4 tracing/conceptual questions
