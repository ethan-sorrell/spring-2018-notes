* Scheme Summary
** notes
- always think of lists in terms of their implementation as singly-linked list
- foldl and foldr are noteworthy
- look at optimized fib function
- try optimizing our combinations function similarly
** keywords
- define, load
- +, -, *, quotient, modulo
- =, <, >, <=, >=
- and, or, not
- if, cond
- car, cdr
- null?, integer?, symbol?, boolean?, procedure?, eq?, equal?
- length, append, reverse
- list, flatten, map, fold_left (foldl), fold_right (foldr), filtif I receive the position.er, zip, zipwith
- let, let*, letrec

** concepts
- lambda
- variadic functions
* Scheme
- call function :: (functionname params)
- define function :: (define (functionname params) body)
- our naive fib function :: cs403/ex1.scm
- load function definitions :: (load "filename")
- our optimized fib function :: cs403/ex2.scm
- representing list :: '(a b c d e f g)
  - lists are implemented as singly linked lists
- a few useful list functions
  - (car List) :: returns the first element in the list
  - (cdr List) :: returns all but the first element in the list
  - (cadr List) :: returns the car of the cdr i.e. second element in the list
  - (cadddr List) :: returns the car of the cdr of the cdr of the cdr
- our length function :: cs403/ex3.scm
- our summation function :: cs403/ex4.scm
  - note that in a multiplication function the base-case becomes 1
- some type checking
  - (pair? x) :: returns true for anything constructed with cons
  - (rational? x)
  - (integer? x)
  - (number? x) :: returns true if x is integer or rational
  - (boolean? x)
  - (null? x)
  - (procedure? x) :: returns true if x is a function
  - (eq? x y) :: returns true if x and y are the same (works on any type)
    - there's actually more nuance than that though
    - = compares value, for instance equivalent fractions
    - eq? checks if objects are the same
  - (equal? List1 List2) :: returns true if the provided lists contain the same elements
    - our own implementation of equal? :: cs403/ex8.scm
- a new list function
  - (cons element List) :: adds element to the front of List
- our bubble sort implementation :: cs403/ex5.scm
- our append implementation :: cs403/ex6.scm
- our reverse implementation :: cs403/ex7.scm
more list functions
- (list Element) :: equivalent to (cons Element '())
- (flatten List) :: returns list with all nesting removed (not predefined)
  - our flatten implementation :: cs403/ex9.scm
- (map Procedure List) :: performs Procedure on every element in List and returns a new list of equal size
  - our map implementation :: cs403/ex10.scm
- (filter Predicate List) :: applies predicate to elements in List and removes those that return false
  - our filter implementation :: cs403/ex11.scm
- (fold-left Procedure Elemeent List) :: combines all elements in List using Procedure moving from left to right (left associative) beginning with Element
  - our fold-left implementation :: cs403/ex12.scm
  - what would (fold-left cons '() '(a b c d)) return?
- (fold-right Procedure Element List) :: combines all elements in List using Procedure moving from right to left (right associative) beginning with Element
  - our fold-right implementation :: cs403/ex12.scm
  - what about (fold-right cons '() '(a b c d)) return?
  - what about swapcons
  - what about list
- (zip List1 List2) :: creates a list of pairs from elements of List1 and List2
  - our zip implementation :: cs403/ex13.scm
- (zipwith Procedure List1 List2) :: creates a list by combining pairs of elements from List1 and List2 using Procedure
  - our zipwith implementation :: cs403/ex13.scm
- (invmap ListFuncts x) :: (not predefined) applies each function to x returning list of same size as ListFuncts
  - our invmap implementation :: cs403/ex18.scm
Tree Traversals       
- our tree defined as data :; cs403/ex14.scm
- our postorder implementation :: cs403/ex14.scm
Lambda Functions
- (lambda (Params) (Expression)) :: returns a Procedure that takes Params and evaluates to Expression
  - our anonymous cube function :: cs403/ex15.scm
  - our anonymous reverse function :: cs403/ex15.scm
  - note that all functions are actually implicitly created as lambda functions that may then be assigned to symbols
Let
- (let List Expr) :: List contains pairs of Symbols and Values, Expr is evaluated substituting Symbols with there corresponding values
  - our example let expression :: cs403/ex16.scm
  - List is "evaluated" in parallel drawing from global scope
- (let* List Expr)
  - List is "evaluated" sequentially, drawing from previous local definitions, and global scope
- (letrec List Expr)
  - our example letrec expression with brief explanation :: cs403/ex17.scm
Cond
- list of pairs
  - first item in pair is conditional
  - second item in pair is commands, possibly multiple, enclosed in parentheses
- explanation has been omitted, but can be seen in class reference material
- 
Variadic Functions
- (define (Name . Args) (do something)) :: Function definition where Args is a list created from all provided arguments
- (define (plus . args) (fold-left + 0 args)) :: user defined variadic plus function
  - this notation is used because scheme stores your function call as a linked list with the function in the head node
More
- functions can return other functions
  - raisetofunct :: cs403/ex19.scm
Object-oriented Style
- functions that end with ! by convention, have side-effects
- (set! Variable Value) :: changes the value of Variable to Value
- simulating oop in scheme:
(define (classname)
 (let (instancevar names and vals)
   (lambda (msg)
     body)))
(define instance (classname))
- our object-oriented random number generator :: cs403/rand.scm
- our object-oriented stack implementation ::  
* Haskell Summary
- we can put () around an operator to use it as a function
  - e.g. (+) 3 4
- we can use tics to use a function as an operator
  - e.g. 10 `mod` 3
- let, in
- where
- not
- /=, ==, &&, ||
- if, then, else
- +, -, *
- quot, mod
- head, tail, :
- map, fold, filter, zip
- drop, take
** Exam
- defining functions
- recursion
- higher-order functions (map, fold)
- infinite lists and lazy evaluation
- user defined data-types
- type inference & declaration
* Haskell
- Haskell requires that function definitions are loaded from files
  - but a single file may contain numerous function definitions
- functions are defined recursively, with base cases then a recursive case
- cases are checked from top to bottom
- guards may be used in order to list certain cases earlier
  - e.g. fact n | n > 0
- our fibonacci function :: fib.hs
  - includes examples of let in and where
- an optimized fibonacci function is on the class server
- :load filename :: load file
- -- :: denotes the beginning of a comment
- let, in :: keywords in haskell for beginning let blocks
- in let and where blocks we can use braces+semicolon notation
  - we can also use whitespace only by indenting the entire block to the same level
- complex conditions use the same syntax as C :: && ||
List Operations
- [1, 2, 3] :: creates a list with elements 1 2 3
- length List :: returns the length of List
- [ ] :: represents the empty list
- List1 ++ List2 :: appends List2 to List1
- reverse List :: returns reversed List
- if then else :: in practice they aren't required often as a result of how functions are defined
  - our fib function using if then else :: haskell/ex1.hs
- head :: equivalent to car
- tail :: equivalent to cdr
- (:) :: equivalent to cons
- surrounding an operator with () makes it a function
- surrounding a function with `` makes it an operator
- our length function implementation :: haskell/length.hs
- our append function implementation :: haskell/ex2.hs
- our reverse function implementation :: haskell/ex2.hs
- lambda function in haskell :: \x->expr
  - our anonymous odd implementation :: (\x -> mod x 2 == 1)
- foldl (+) 0 [2,3,4,5,6]
- foldr (:) [] [1,2,3,4] :: identity function for list
- foldl (\x -> \y -> y:x) [] [1,2,3,4] :: reverse list
- filter functions as expected
- zip creates a list of tuples with 2 elements from 2 lists
- zip creates a list of tuples with 3 elements from 3 lists
- tuple :: like a struct, does not require same type
- zipWith is built into haskell unlike mit-scheme
- and List :: equivalent to foldr (&&) 1 List
- or List :: equivalent to foldr (||) 0 List
- any Predicate List :: equivalent to:  or (map Predicate List)
- all Predicate List :: equivalent to:  and (map Predicate List)
- there is no difference between a string and a list of characters
list comprehension

- map odd [2,3,5,6,8,9]
equivalent to
- [ odd x | x <- [2,3,5,6,8,9] ]

- filter odd [2,3,5,6,8,9]
equivalent to 
- [x | x <-[2,3,5,6,8,9], odd x]

- [x*x | x <-[2,3,5,6,8,9], odd x]
- [1..10] :: [1,2,3,4,5,6,7,8,9,10]

- Get the squares of odd numbers, 1 to 100:
- [x*x| x<-[1..100], (mod x 2) /= 0]

- quicksort implementation:
- haskell/qsort.hs

- more with infinite lists and recursively defined functions
- haskell/ex3.hs

- our enumerated type creation
- haskell/ex3.hs

- qualifiers (hierarchical, high numbers require lower numbers)
1. eq :: ==, /=
  2. ord :: <, >, <=, >=,
    3. num :: +, -, *
      4a. Integral div, mod
        5aa. Int
        5ab. Integer
      4b. Fractional /
        5ba. Float
        5bb. Double


more on enumerated types
-haskell/ex5.hs

a tree implementation
-haskell/tree.hs

- defining functions:
  - funname :: type 
    - qualifiers =>
    - paramtype -> returntype
      - a -> ( a -> a )
      - functions only take 1 param at a time
        - think let f = max 5 in f 7
        - this is called *currying* a function
- uncurry Func :: takes curryied function and returns an un-curryied function
- curry Func :: takes un-curryied function and returns an curryied function
- flip Func :: takes a curryied function and returns one with order of params flipped
- (func1 . func2) :: composition of f and g
